import * as ts from "typescript";

export function generateChunkLoader(): ts.MethodDeclaration {
    const factory: typeof ts.factory = ts.factory;
    return factory.createMethodDeclaration(
        [
            factory.createToken(ts.SyntaxKind.PublicKeyword),
            factory.createToken(ts.SyntaxKind.AsyncKeyword)
        ],
        undefined,
        factory.createIdentifier("loadChunk"),
        undefined,
        undefined,
        [factory.createParameterDeclaration(
            undefined,
            undefined,
            factory.createIdentifier("chunk"),
            undefined,
            factory.createTypeReferenceNode(
                factory.createIdentifier("ChunkInfo"),
                undefined
            ),
            undefined
        )],
        factory.createTypeReferenceNode(
            factory.createIdentifier("Promise"),
            [factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)]
        ),
        factory.createBlock(
            [
                factory.createVariableStatement(
                    undefined,
                    factory.createVariableDeclarationList(
                        [factory.createVariableDeclaration(
                            factory.createIdentifier("path"),
                            undefined,
                            factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
                            factory.createPropertyAccessExpression(
                                factory.createParenthesizedExpression(factory.createTypeAssertion(
                                    factory.createTypeReferenceNode(
                                        factory.createIdentifier("HTMLScriptElement"),
                                        undefined
                                    ),
                                    factory.createPropertyAccessExpression(
                                        factory.createIdentifier("document"),
                                        factory.createIdentifier("currentScript")
                                    )
                                )),
                                factory.createIdentifier("src")
                            )
                        )],
                        ts.NodeFlags.Let | ts.NodeFlags.AwaitContext | ts.NodeFlags.ContextFlags | ts.NodeFlags.TypeExcludesFlags
                    )
                ),
                factory.createExpressionStatement(factory.createBinaryExpression(
                    factory.createIdentifier("path"),
                    factory.createToken(ts.SyntaxKind.EqualsToken),
                    factory.createBinaryExpression(
                        factory.createCallExpression(
                            factory.createPropertyAccessExpression(
                                factory.createIdentifier("path"),
                                factory.createIdentifier("substring")
                            ),
                            undefined,
                            [
                                factory.createNumericLiteral("0"),
                                factory.createCallExpression(
                                    factory.createPropertyAccessExpression(
                                        factory.createIdentifier("path"),
                                        factory.createIdentifier("lastIndexOf")
                                    ),
                                    undefined,
                                    [factory.createStringLiteral("/")]
                                )
                            ]
                        ),
                        factory.createToken(ts.SyntaxKind.PlusToken),
                        factory.createBinaryExpression(
                            factory.createStringLiteral("/"),
                            factory.createToken(ts.SyntaxKind.PlusToken),
                            factory.createPropertyAccessExpression(
                                factory.createIdentifier("chunk"),
                                factory.createIdentifier("filePath")
                            )
                        )
                    )
                )),
                factory.createVariableStatement(
                    undefined,
                    factory.createVariableDeclarationList(
                        [factory.createVariableDeclaration(
                            factory.createIdentifier("script"),
                            undefined,
                            factory.createTypeReferenceNode(
                                factory.createIdentifier("HTMLScriptElement"),
                                undefined
                            ),
                            factory.createCallExpression(
                                factory.createPropertyAccessExpression(
                                    factory.createIdentifier("document"),
                                    factory.createIdentifier("createElement")
                                ),
                                undefined,
                                [factory.createStringLiteral("script")]
                            )
                        )],
                        ts.NodeFlags.Const | ts.NodeFlags.AwaitContext | ts.NodeFlags.ContextFlags | ts.NodeFlags.TypeExcludesFlags
                    )
                ),
                factory.createReturnStatement(factory.createNewExpression(
                    factory.createIdentifier("Promise"),
                    [factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)],
                    [factory.createArrowFunction(
                        undefined,
                        undefined,
                        [factory.createParameterDeclaration(
                            undefined,
                            undefined,
                            factory.createIdentifier("resolve"),
                            undefined,
                            undefined,
                            undefined
                        )],
                        undefined,
                        factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                        factory.createBlock(
                            [
                                factory.createExpressionStatement(factory.createCallExpression(
                                    factory.createPropertyAccessExpression(
                                        factory.createIdentifier("script"),
                                        factory.createIdentifier("addEventListener")
                                    ),
                                    undefined,
                                    [
                                        factory.createStringLiteral("load"),
                                        factory.createArrowFunction(
                                            undefined,
                                            undefined,
                                            [],
                                            undefined,
                                            factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                            factory.createCallExpression(
                                                factory.createIdentifier("resolve"),
                                                undefined,
                                                []
                                            )
                                        )
                                    ]
                                )),
                                factory.createExpressionStatement(factory.createCallExpression(
                                    factory.createPropertyAccessExpression(
                                        factory.createPropertyAccessExpression(
                                            factory.createIdentifier("document"),
                                            factory.createIdentifier("head")
                                        ),
                                        factory.createIdentifier("appendChild")
                                    ),
                                    undefined,
                                    [factory.createIdentifier("script")]
                                )),
                                factory.createExpressionStatement(factory.createBinaryExpression(
                                    factory.createPropertyAccessExpression(
                                        factory.createIdentifier("script"),
                                        factory.createIdentifier("src")
                                    ),
                                    factory.createToken(ts.SyntaxKind.EqualsToken),
                                    factory.createIdentifier("path")
                                ))
                            ],
                            true
                        )
                    )]
                ))
            ],
            true
        )
    );
}